# Check that the first consecutivity constraint on B is abandoned
# when the conditional validity constraints kick in,
# allowing the second consecutivity constraint to be optimized.
domain: [N] -> { B[i, j, k] : 0 <= i < N and 0 <= j < N and 0 <= k < N; A[i, j] : 0 <= i < N and 0 <= j < N }
validity: [N] -> { A[i, j] -> B[i' = i, j' = j, k = 0] : N > 0 and 0 <= i < N and 0 <= j < N; B[i, j, k] -> B[i' = i, j' = j, k' = 1 + k] : 0 <= i < N and 0 <= j < N and 0 <= k <= -2 + N }
proximity: [N] -> { A[i, j] -> B[i' = i, j' = j, k = 0] : N > 0 and 0 <= i < N and 0 <= j < N; B[i, j, k] -> B[i' = i, j' = j, k' = 1 + k] : 0 <= i < N and 0 <= j < N and 0 <= k <= -2 + N }
condition: [N] -> { [B[i, j, k] -> __pet_ref_2[]] -> [B[i' = i, j' = j, k' = 1 + k] -> __pet_ref_6[]] : 0 <= i < N and 0 <= j < N and 0 <= k <= -2 + N; [A[i, j] -> __pet_ref_1[]] -> [B[i' = i, j' = j, k = 0] -> __pet_ref_6[]] : N > 0 and 0 <= i < N and 0 <= j < N }
conditional_validity: [N] -> { [B[i, j, k] -> __pet_ref_6[]] -> [B[i', j', k'] -> __pet_ref_2[]] : i >= 0 and 0 <= j < N and 0 <= k < N and i < i' < N and 0 <= j' < N and 0 <= k' < N; [B[i, j, k] -> __pet_ref_6[]] -> [B[i' = i, j', k'] -> __pet_ref_2[]] : 0 <= i < N and j >= 0 and 0 <= k < N and j < j' < N and 0 <= k' < N; [B[i, j, k] -> __pet_ref_6[]] -> [B[i' = i, j' = j, k'] -> __pet_ref_2[]] : 0 <= i < N and 0 <= j < N and k >= 0 and k < k' < N; [B[i, j, k = -1 + N] -> __pet_ref_2[]] -> [A[i', j'] -> __pet_ref_1[]] : i >= 0 and 0 <= j < N and i < i' < N and 0 <= j' < N; [B[i, j, k = -1 + N] -> __pet_ref_2[]] -> [A[i' = i, j'] -> __pet_ref_1[]] : 0 <= i < N and j >= 0 and j < j' < N; [B[i, j, k] -> __pet_ref_6[]] -> [A[i', j'] -> __pet_ref_1[]] : i >= 0 and 0 <= j < N and 0 <= k < N and i < i' < N and 0 <= j' < N; [B[i, j, k] -> __pet_ref_6[]] -> [A[i' = i, j'] -> __pet_ref_1[]] : 0 <= i < N and j >= 0 and 0 <= k < N and j < j' < N; [B[i, j, k = -1 + N] -> __pet_ref_2[]] -> [B[i', j', k'] -> __pet_ref_2[]] : i >= 0 and 0 <= j < N and i < i' < N and 0 <= j' < N and 0 <= k' < N; [B[i, j, k = -1 + N] -> __pet_ref_2[]] -> [B[i' = i, j', k'] -> __pet_ref_2[]] : 0 <= i < N and j >= 0 and j < j' < N and 0 <= k' < N }
intra_consecutivity: ([N] -> { B[i, j, k] -> [[(i)] -> [(k), (j)]] },[N] -> { B[i, j, k] -> [[] -> [(-j)]] })
